package java_bootcamp;

import net.corda.core.contracts.Command;
import net.corda.core.contracts.CommandData;
import net.corda.core.contracts.Contract;
import net.corda.core.contracts.ContractState;
import net.corda.core.transactions.LedgerTransaction;
import org.jetbrains.annotations.NotNull;

import static net.corda.core.contracts.ContractsDSL.requireThat;

/* Our contract, governing how our state will evolve over time.
 * See src/main/java/examples/ArtContract.java for an example. */
public class TokenContract implements Contract {
    public static String ID = "java_bootcamp.TokenContract";

    @Override
    public void verify(@NotNull LedgerTransaction tx) throws IllegalArgumentException {
        if (tx.getInputStates().size() > 0)
            throw new IllegalArgumentException("Breaking the rule in contract: No inputs.");

        if (tx.getOutputStates().size() != 1)
            throw new IllegalArgumentException("Breaking the rule in contract: One output.");

        if (tx.getCommands().size() != 1)
            throw new IllegalArgumentException("Breaking the rule in contract: One command.");

        if (!(tx.getOutputStates().get(0) instanceof TokenState))
            throw new IllegalArgumentException("Breaking the rule in contract: Output is TokenState.");

        TokenState output = (TokenState)tx.getOutputStates().get(0);
        if (output.getAmount() <= 0)
            throw new IllegalArgumentException("Breaking the rule in contract: Output's amount field is positive.");

        if (!(tx.getCommands().get(0).getValue() instanceof Commands.Issue))
            throw new IllegalArgumentException("Breaking the rule in contract: Command is Issue.");

        if (!tx.getCommands().get(0).getSigners().contains(output.getIssuer().getOwningKey()))
            throw new IllegalArgumentException("Breaking the rule in contract: Issuer is required signer.");

    }

    public interface Commands extends CommandData {
        class Issue implements Commands { }
    }
}